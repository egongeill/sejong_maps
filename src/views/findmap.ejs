<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Sejong MAPS</title>
    <link rel="stylesheet" href="/css/style.css" type="text/css" />

    <script
      src="https://kit.fontawesome.com/d5fbb687f5.js"
      crossorigin="anonymous"
    ></script>
  </head>
  <body class="wrapper">
    <h1>지도 보기</h1>
    <hr class="upper-hr" />

    <div class="map_wrap">
      <div class="map_roadview_intro">
        <span class="map_name">지도 보기</span>
        <p class="map_explain">
          세종대학교를 위에서 볼 수 있습니다!<br />그리고 마커를 클릭하면 어떤
          건물인지 알 수 있습니다.
        </p>
      </div>
      <div id="mapWrapper" style="width: 800px; height: 400px">
        <div id="menu_wrap" class="bg_white">
          <div class="option">
            <div>
              <form onsubmit="searchPlaces(); return false;">
                키워드 :
                <input type="text" value="세종대학교" id="keyword" size="10" />
                <button type="submit">검색하기</button>
              </form>
            </div>
          </div>
          <hr />
          <ul id="placesList"></ul>
          <div id="pagination"></div>
        </div>
        <div id="map" style="width: 100%; height: 100%"></div>
        <!-- 지도를 표시할 div 입니다 -->
      </div>
      <div class="map_roadview_intro">
        <span class="map_name">로드뷰 보기</span>
        <p class="roadview_explain">
          직접 이동하면서 세종대학교의 전경을 구경하세요!
        </p>
      </div>
      <div id="rvWrapper" style="width: 800px; height: 400px">
        <p></p>
        <div id="roadview" style="width: 100%; height: 100%"></div>
        <!-- 로드뷰를 표시할 div 입니다 -->
      </div>
    </div>

    <nav class="index-nav">
      <div class="btn-box">
        <div class="icon-btn">
          <a href="/" class="block"><i class="fas fa-home"></i></a>
        </div>
        <span>홈</span>
      </div>
      <div class="btn-box">
        <div class="icon-btn">
          <a href="/navs/howtocome" class="block"
            ><i class="fas fa-walking"></i
          ></a>
        </div>
        <span>세종 오는 길</span>
      </div>
      <div class="btn-box">
        <div class="icon-btn">
          <a href="/navs/tips" class="block"><i class="fas fa-pen"></i></a>
        </div>
        <span>세종 꿀팁</span>
      </div>
      <div class="btn-box">
        <div class="icon-btn">
          <a href="/navs/comments" class="block"
            ><i class="fas fa-comments"></i
          ></a>
        </div>
        <span>방명록</span>
      </div>
    </nav>
    <script
      type="text/javascript"
      src="//dapi.kakao.com/v2/maps/sdk.js?appkey=2e4c067991f6e629d5c32c833be84ab1"
    ></script>

    <script>
      var mapContainer = document.getElementById("map"), // 지도를 표시할 div
        mapCenter = new kakao.maps.LatLng(
          37.55180968896947,
          127.07364946575993
        ),
        mapOption = {
          center: mapCenter, // 지도의 중심좌표
          level: 3, // 지도의 확대 레벨
        };

      var map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다
      /*
                  // 지도 확대 축소를 제어할 수 있는  줌 컨트롤을 생성합니다
                  var zoomControl = new kakao.maps.ZoomControl();
                  map.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);

                  // 지도가 확대 또는 축소되면 마지막 파라미터로 넘어온 함수를 호출하도록 이벤트를 등록합니다
                  kakao.maps.event.addListener(map, "zoom_changed", function () {
                    // 지도의 현재 레벨을 얻어옵니다
                    var level = map.getLevel();

                    var message = "현재 지도 레벨은 " + level + " 입니다";
                    var resultDiv = document.getElementById("result");
                    resultDiv.innerHTML = message;
                  });
            */
      var iwContent = '<div style="padding:5px;">컨테이너 어딨더라..</div>', // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다
        iwPosition = new kakao.maps.LatLng(
          37.54827216453042,
          127.07315124829312
        ), //인포윈도우 표시 위치입니다
        iwRemoveable = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다

      // 인포윈도우를 생성하고 지도에 표시합니다
      var window = new kakao.maps.InfoWindow({
        map: map, // 인포윈도우가 표시될 지도
        position: iwPosition,
        content: iwContent,
      });

      var iwContent1 = '<div style="padding:5px;">정문에서 쪽문으로!</div>', // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다
        iwPosition1 = new kakao.maps.LatLng(
          37.549373716042595,
          127.07448162395171
        ), //인포윈도우 표시 위치입니다
        iwRemoveable1 = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다

      // 인포윈도우를 생성하고 지도에 표시합니다
      var window1 = new kakao.maps.InfoWindow({
        map: map, // 인포윈도우가 표시될 지도
        position: iwPosition1,
        content: iwContent1,
      });
      var iwContent2 = '<div style="padding:5px;">과방 가고싶을 때ㅜㅜ</div>', // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다
        iwPosition2 = new kakao.maps.LatLng(
          37.55149171144117,
          127.07484103995286
        ), //인포윈도우 표시 위치입니다
        iwRemoveable2 = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다

      // 인포윈도우를 생성하고 지도에 표시합니다
      var window2 = new kakao.maps.InfoWindow({
        map: map, // 인포윈도우가 표시될 지도
        position: iwPosition2,
        content: iwContent2,
      });
      // 마커를 표시할 위치와 내용을 가지고 있는 객체 배열입니다
      var positions = [
        {
          img: "/imgs/front.jpg",
          title: "0광개토관",
          latlng: new kakao.maps.LatLng(37.55031012454832, 127.07313881055019),
        },
        {
          img: "/imgs/front.jpg",
          title: "1군자관",
          latlng: new kakao.maps.LatLng(37.54971720784541, 127.07369548171495),
        },
        {
          img: "/imgs/front.jpg",
          title: "2대양A센터",
          latlng: new kakao.maps.LatLng(37.55089621518929, 127.07565393051127),
        },
        {
          img: "/imgs/front.jpg",
          title: "3대양홀",
          latlng: new kakao.maps.LatLng(37.548598668284114, 127.07448175776558),
        },
        {
          img: "/imgs/front.jpg",
          title: "4동천관",
          latlng: new kakao.maps.LatLng(37.55175102648029, 127.07420611055026),
        },
        {
          img: "/imgs/front.jpg",
          title: "5세종관",
          latlng: new kakao.maps.LatLng(37.550082770591835, 127.07449463938555),
        },
        {
          img: "/imgs/front.jpg",
          title: "6애지헌",
          latlng: new kakao.maps.LatLng(37.550933081063924, 127.07392206822097),
        },
        {
          img: "/imgs/front.jpg",
          title: "7영실관",
          latlng: new kakao.maps.LatLng(37.55234033610852, 127.073327645218),
        },
        {
          img: "/imgs/front.jpg",
          title: "8용덕관",
          latlng: new kakao.maps.LatLng(37.55131963458407, 127.07335983172395),
        },
        {
          img: "/imgs/front.jpg",
          title: "9우정관",
          latlng: new kakao.maps.LatLng(37.551838492939204, 127.07471166497393),
        },
        {
          img: "/imgs/front.jpg",
          title: "10율곡관",
          latlng: new kakao.maps.LatLng(37.55181248023683, 127.0740334849386),
        },
        {
          img: "/imgs/front.jpg",
          title: "11진관홀",
          latlng: new kakao.maps.LatLng(37.55092281551573, 127.07333691239755),
        },
        {
          img: "/imgs/front.jpg",
          title: "12집현관",
          latlng: new kakao.maps.LatLng(37.54898343376276, 127.07377679471384),
        },
        {
          img: "/imgs/front.jpg",
          title: "13충무관",
          latlng: new kakao.maps.LatLng(37.55225823763522, 127.07405574442465),
        },
        {
          img: "/imgs/front.jpg",
          title: "14학생회관",
          latlng: new kakao.maps.LatLng(37.549450666981315, 127.07509854914456),
        },
        {
          img: "/imgs/front.jpg",

          title: "**Speial코스 1: 쪽문~**",
          latlng: new kakao.maps.LatLng(37.54966318493737, 127.0734752474031),
        },
        {
          img: "/imgs/front.jpg",

          title: "**Speial코스 2: 캠퍼스타운~*",
          latlng: new kakao.maps.LatLng(37.548924441486506, 127.07322776036561),
        },
        {
          img: "/imgs/front.jpg",

          title: "**Speial코스 3: 우정당 과방으로~**",
          latlng: new kakao.maps.LatLng(37.55180421287339, 127.07476644263795),
        },
        {
          img: "/imgs/front.jpg",

          title: "**어서와 세종대는 처음이지?^.^",
          latlng: new kakao.maps.LatLng(37.54901837997851, 127.07522603075076), //정문
        },
      ];

      var buildings = [];

      for (let i = 0; i < positions.length; i++) {
        var data = positions[i];
        displayMarker(data);
      }

      // 지도에 마커를 표시하는 함수입니다
      function displayMarker(data) {
        var marker = new kakao.maps.Marker({
          map: map,
          position: data.latlng,
        });
        var wraps = document.createElement("div");
        wraps.className = "wrap";

        var overlay = new kakao.maps.CustomOverlay({
          content: wraps,
          position: marker.getPosition(),
        });

        var content = document.createElement("div");
        var title = document.createElement("div");
        title.className = "title";
        title.innerHTML = data.title;
        title.style.cssText =
          "color: white;background:#C30D2E; padding: 5px 0 0 10px;height: 30px;";
        var imgDiv = document.createElement("div");
        imgDiv.className = "imgDiv";
        var img = document.createElement("img");
        img.src = data.img;
        img.width = "73";
        img.height = "70";
        imgDiv.style.cssText = "  position: absolute;bottom: 6px;left: 5px;";
        imgDiv.appendChild(img);

        var desc = document.createElement("div");
        desc.innerText = "서울 광진구 능동로 209";
        var desc1 = document.createElement("div");
        desc1.innerText = "(지번) 군자동 98";

        desc.style.cssText =
          "position:relative;  margin: 13px 0 0 90px; font-size:15px;";
        desc1.style.cssText =
          "postion:relative; margin: 5px 0 0 90px; font-size:15px;";
        content.className = "content";
        content.appendChild(title);
        content.appendChild(imgDiv);
        content.appendChild(desc);
        content.appendChild(desc1);

        content.style.cssText =
          "background: white;   border-radius: 5px;border-bottom: 2px solid #ccc;border-right: 1px solid #ccc;background: rgb(248, 248, 248);";
        content.style.width = "250px";
        content.style.height = "200px";
        wraps.appendChild(content);

        var closeBtn = document.createElement("button");
        closeBtn.innerHTML = "❌";
        closeBtn.style.cssText = "position:absolute;top:5px;right:38px;";
        closeBtn.onclick = function () {
          overlay.setMap(null);
        };
        title.appendChild(closeBtn);

        kakao.maps.event.addListener(marker, "click", function () {
          overlay.setMap(map);
        });
      }

      /*
            function closeOverlay() {
              overlay.setMap(null);
            }*/
      /* 마커에 표시할 인포윈도우를 생성합니다
                    var infowindow = new kakao.maps.InfoWindow({
                      content: positions[i].content, // 인포윈도우에 표시할 내용
                    });
                    */
      // 마커 위에 커스텀오버레이를 표시합니다
      // 마커를 중심으로 커스텀 오버레이를 표시하기위해 CSS를 이용해 위치를 설정했습니다

      // 선을 구성하는 좌표 배열입니다. 이 좌표들을 이어서 선을 표시합니다
      var linePath1 = [
        new kakao.maps.LatLng(37.54901837997851, 127.07522603075076), //정문
        new kakao.maps.LatLng(37.54971720784541, 127.07369548171495), //군자관
        new kakao.maps.LatLng(37.54966318493737, 127.0734752474031), //쪽문
      ];

      // 지도에 표시할 선을 생성합니다
      var polyline1 = new kakao.maps.Polyline({
        path: linePath1, // 선을 구성하는 좌표배열 입니다
        strokeWeight: 5, // 선의 두께 입니다
        strokeColor: "#FFAE00", // 선의 색깔입니다
        strokeOpacity: 0.7, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
        strokeStyle: "solid", // 선의 스타일입니다
      });

      // 지도에 쪽문까지 가는 선을 표시합니다
      polyline1.setMap(map);

      var linePath2 = [
        new kakao.maps.LatLng(37.551100325556725, 127.07540176519774), //센
        new kakao.maps.LatLng(37.55158941488733, 127.07469366203172), //학정
        new kakao.maps.LatLng(37.55180421287339, 127.07476644263795), //과방
      ];

      // 지도에 표시할 선을 생성합니다
      var polyline2 = new kakao.maps.Polyline({
        path: linePath2, // 선을 구성하는 좌표배열 입니다
        strokeWeight: 5, // 선의 두께 입니다
        strokeColor: "#FFAE00", // 선의 색깔입니다
        strokeOpacity: 0.7, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
        strokeStyle: "solid", // 선의 스타일입니다
      });

      // 지도에 선을 표시합니다
      polyline2.setMap(map);

      var linePath3 = [
        new kakao.maps.LatLng(37.54860807877488, 127.07492436965416), //어대공출구
        new kakao.maps.LatLng(37.547929457743734, 127.07439342514157),
        new kakao.maps.LatLng(37.5480891987544, 127.07294694243646),
        new kakao.maps.LatLng(37.54833092540971, 127.07319065046569),
        new kakao.maps.LatLng(37.548924441486506, 127.07322776036561), //쪽문
      ];

      // 지도에 표시할 선을 생성합니다
      var polyline3 = new kakao.maps.Polyline({
        path: linePath3, // 선을 구성하는 좌표배열 입니다
        strokeWeight: 5, // 선의 두께 입니다
        strokeColor: "#FFAE00", // 선의 색깔입니다
        strokeOpacity: 0.7, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
        strokeStyle: "solid", // 선의 스타일입니다
      });

      // 지도에 선을 표시합니다
      polyline3.setMap(map);

      //지도위에 현재 로드뷰의 위치와, 각도를 표시하기 위한 map walker 아이콘 생성 클래스
      function MapWalker(position) {
        //커스텀 오버레이에 사용할 map walker 엘리먼트
        var content = document.createElement("div");
        var figure = document.createElement("div");
        var angleBack = document.createElement("div");

        //map walker를 구성하는 각 노드들의 class명을 지정 - style셋팅을 위해 필요
        content.className = "MapWalker";
        figure.className = "figure";
        angleBack.className = "angleBack";

        content.appendChild(angleBack);
        content.appendChild(figure);

        //커스텀 오버레이 객체를 사용하여, map walker 아이콘을 생성
        var walker = new kakao.maps.CustomOverlay({
          position: position,
          content: content,
          yAnchor: 1,
        });

        this.walker = walker;
        this.content = content;
      }

      //로드뷰의 pan(좌우 각도)값에 따라 map walker의 백그라운드 이미지를 변경 시키는 함수
      //background로 사용할 sprite 이미지에 따라 계산 식은 달라 질 수 있음
      MapWalker.prototype.setAngle = function (angle) {
        var threshold = 22.5; //이미지가 변화되어야 되는(각도가 변해야되는) 임계 값
        for (var i = 0; i < 16; i++) {
          //각도에 따라 변화되는 앵글 이미지의 수가 16개
          if (angle > threshold * i && angle < threshold * (i + 1)) {
            //각도(pan)에 따라 아이콘의 class명을 변경
            var className = "m" + i;
            this.content.className = this.content.className.split(" ")[0];
            this.content.className += " " + className;
            break;
          }
        }
      };

      //map walker의 위치를 변경시키는 함수
      MapWalker.prototype.setPosition = function (position) {
        this.walker.setPosition(position);
      };

      //map walker를 지도위에 올리는 함수
      MapWalker.prototype.setMap = function (map) {
        this.walker.setMap(map);
      };
      // 로드뷰 도로를 지도위에 올린다.
      map.removeOverlayMapTypeId(kakao.maps.MapTypeId.ROADVIEW);

      var roadviewContainer = document.getElementById("roadview"); // 로드뷰를 표시할 div
      var roadview = new kakao.maps.Roadview(roadviewContainer); // 로드뷰 객체
      var roadviewClient = new kakao.maps.RoadviewClient(); // 좌표로부터 로드뷰 파노ID를 가져올 로드뷰 helper객체

      // 지도의 중심좌표와 가까운 로드뷰의 panoId를 추출하여 로드뷰를 띄운다.
      roadviewClient.getNearestPanoId(mapCenter, 50, function (panoId) {
        roadview.setPanoId(panoId, mapCenter); // panoId와 중심좌표를 통해 로드뷰 실행
      });

      var mapWalker = null;

      // 로드뷰의 초기화 되었을때 map walker를 생성한다.
      kakao.maps.event.addListener(roadview, "init", function () {
        // map walker를 생성한다. 생성시 지도의 중심좌표를 넘긴다.
        mapWalker = new MapWalker(mapCenter);
        mapWalker.setMap(map); // map walker를 지도에 설정한다.

        // 로드뷰가 초기화 된 후, 추가 이벤트를 등록한다.
        // 로드뷰를 상,하,좌,우,줌인,줌아웃을 할 경우 발생한다.
        // 로드뷰를 조작할때 발생하는 값을 받아 map walker의 상태를 변경해 준다.
        kakao.maps.event.addListener(
          roadview,
          "viewpoint_changed",
          function () {
            // 이벤트가 발생할 때마다 로드뷰의 viewpoint값을 읽어, map walker에 반영
            var viewpoint = roadview.getViewpoint();
            mapWalker.setAngle(viewpoint.pan);
          }
        );

        // 로드뷰내의 화살표나 점프를 하였을 경우 발생한다.
        // position값이 바뀔 때마다 map walker의 상태를 변경해 준다.
        kakao.maps.event.addListener(roadview, "position_changed", function () {
          // 이벤트가 발생할 때마다 로드뷰의 position값을 읽어, map walker에 반영
          var position = roadview.getPosition();
          mapWalker.setPosition(position);
          map.setCenter(position);
        });
      });

      // 장소 검색 객체를 생성합니다
      var ps = new kakao.maps.services.Places();

      // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다
      var popup = new kakao.maps.InfoWindow({ zIndex: 1 });

      // 키워드로 장소를 검색합니다
      searchPlaces();

      // 키워드 검색을 요청하는 함수입니다
      function searchPlaces() {
        var keyword = document.getElementById("keyword").value;

        if (!keyword.replace(/^\s+|\s+$/g, "")) {
          alert("키워드를 입력해주세요!");
          return false;
        }

        // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다
        ps.keywordSearch(keyword, placesSearchCB);
      }

      // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다
      function placesSearchCB(data, status, pagination) {
        if (status === kakao.maps.services.Status.OK) {
          // 정상적으로 검색이 완료됐으면
          // 검색 목록과 마커를 표출합니다
          displayPlaces(data);

          // 페이지 번호를 표출합니다
          displayPagination(pagination);
        } else if (status === kakao.maps.services.Status.ZERO_RESULT) {
          alert("검색 결과가 존재하지 않습니다.");
          return;
        } else if (status === kakao.maps.services.Status.ERROR) {
          alert("검색 결과 중 오류가 발생했습니다.");
          return;
        }
      }

      // 검색 결과 목록과 마커를 표출하는 함수입니다
      function displayPlaces(places) {
        var listEl = document.getElementById("placesList"),
          menuEl = document.getElementById("menu_wrap"),
          fragment = document.createDocumentFragment(),
          bounds = new kakao.maps.LatLngBounds(),
          listStr = "";

        // 검색 결과 목록에 추가된 항목들을 제거합니다
        removeAllChildNods(listEl);

        // 지도에 표시되고 있는 마커를 제거합니다
        removeMarker();

        for (var i = 0; i < places.length; i++) {
          // 마커를 생성하고 지도에 표시합니다
          var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),
            marker = addMarker(placePosition, i),
            itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다

          // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해
          // LatLngBounds 객체에 좌표를 추가합니다
          bounds.extend(placePosition);

          // 마커와 검색결과 항목에 mouseover 했을때
          // 해당 장소에 인포윈도우에 장소명을 표시합니다
          // mouseout 했을 때는 인포윈도우를 닫습니다
          (function (marker, title) {
            kakao.maps.event.addListener(marker, "mouseover", function () {
              displayInfowindow(marker, title);
            });

            kakao.maps.event.addListener(marker, "mouseout", function () {
              infowindow.close();
            });

            itemEl.onmouseover = function () {
              displayInfowindow(marker, title);
            };

            itemEl.onmouseout = function () {
              infowindow.close();
            };
          })(marker, places[i].place_name);

          fragment.appendChild(itemEl);
        }

        // 검색결과 항목들을 검색결과 목록 Elemnet에 추가합니다
        listEl.appendChild(fragment);
        menuEl.scrollTop = 0;

        // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다
        map.setBounds(bounds);
      }

      // 검색결과 항목을 Element로 반환하는 함수입니다
      function getListItem(index, places) {
        var el = document.createElement("li"),
          itemStr =
            '<span class="markerbg marker_' +
            (index + 1) +
            '"></span>' +
            '<div class="info">' +
            "   <h5>" +
            places.place_name +
            "</h5>";

        if (places.road_address_name) {
          itemStr +=
            "    <span>" +
            places.road_address_name +
            "</span>" +
            '   <span class="jibun gray">' +
            places.address_name +
            "</span>";
        } else {
          itemStr += "    <span>" + places.address_name + "</span>";
        }

        itemStr += '  <span class="tel">' + places.phone + "</span>" + "</div>";

        el.innerHTML = itemStr;
        el.className = "item";

        return el;
      }

      // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다
      function addMarker(position, idx, title) {
        var imageSrc =
            "https://png.pngtree.com/png-vector/20210309/ourmid/pngtree-checkmark-png-image_3024001.jpg", // 마커 이미지 url, 스프라이트 이미지를 씁니다
          imageSize = new kakao.maps.Size(36, 37), // 마커 이미지의 크기
          imgOptions = {
            spriteSize: new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기
            spriteOrigin: new kakao.maps.Point(0, idx * 46 + 10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표
            offset: new kakao.maps.Point(13, 37), // 마커 좌표에 일치시킬 이미지 내에서의 좌표
          },
          markerImage = new kakao.maps.MarkerImage(
            imageSrc,
            imageSize,
            imgOptions
          ),
          marker = new kakao.maps.Marker({
            position: position, // 마커의 위치
            image: markerImage,
          });

        marker.setMap(map); // 지도 위에 마커를 표출합니다
        markers.push(marker); // 배열에 생성된 마커를 추가합니다

        return marker;
      }

      // 지도 위에 표시되고 있는 마커를 모두 제거합니다
      function removeMarker() {
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(null);
        }
        markers = [];
      }

      // 검색결과 목록 하단에 페이지번호를 표시는 함수입니다
      function displayPagination(pagination) {
        var paginationEl = document.getElementById("pagination"),
          fragment = document.createDocumentFragment(),
          i;

        // 기존에 추가된 페이지번호를 삭제합니다
        while (paginationEl.hasChildNodes()) {
          paginationEl.removeChild(paginationEl.lastChild);
        }

        for (i = 1; i <= pagination.last; i++) {
          var el = document.createElement("a");
          el.href = "#";
          el.innerHTML = i;

          if (i === pagination.current) {
            el.className = "on";
          } else {
            el.onclick = (function (i) {
              return function () {
                pagination.gotoPage(i);
              };
            })(i);
          }

          fragment.appendChild(el);
        }
        paginationEl.appendChild(fragment);
      }

      // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다
      // 인포윈도우에 장소명을 표시합니다
      function displayInfowindow(marker, title) {
        var content = '<div style="padding:5px;z-index:1;">' + title + "</div>";

        infowindow.setContent(content);
        infowindow.open(map, marker);
      }

      // 검색결과 목록의 자식 Element를 제거하는 함수입니다
      function removeAllChildNods(el) {
        while (el.hasChildNodes()) {
          el.removeChild(el.lastChild);
        }
      }
    </script>
  </body>
</html>
